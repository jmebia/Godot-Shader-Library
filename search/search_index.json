{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Maiusebi's Godot Shader Library","text":"<p>Hi, I am JM, a web dev and indie game dev. I created this web documentation mainly to have a central repository of shaders that I have used and/or may use in my game projects, instead of manually looking for them from my previous projects or online. </p> <p>Go to shaders </p>"},{"location":"shaderlib/colors/","title":"Color Manipulation","text":"<p>Shaders that you'd use to alter your sprite's color properties such as brightness and saturation.</p>"},{"location":"shaderlib/colors/#custom-colored-flash","title":"Custom Colored Flash","text":"<p>This little shader is my go-to for making quick hit or flash effects in Godot. Whenever something gets damaged or you want to grab the player\u2019s attention, this shader makes the sprite flash a bright color \u2014 super simple but really effective!</p> Parameter Description <code>flash_color</code> The color used to \u201cflash\u201d the sprite. <code>flash_modifier</code> Controls the intensity of the flash (0 = no flash, 1 = full flash). <pre><code>shader_type canvas_item;\n\nuniform vec4 flash_color: source_color = vec4(1.0);\nuniform float flash_modifier: hint_range(0.0,1.0) = 1;\n\nvoid fragment() {\n    vec4 color = texture(TEXTURE, UV);\n    color.rgb = mix(color.rgb, flash_color.rgb, flash_modifier);\n    COLOR = color;\n}\n</code></pre>"},{"location":"shaderlib/colors/#brightness","title":"Brightness","text":"<pre><code>shader_type canvas_item;\n\nuniform float brightness : hint_range(1.0, 2.0) = 1.0;\n\nvoid fragment() {\n    vec4 tex_color = texture(TEXTURE, UV);\n    COLOR = tex_color * brightness;\n}\n</code></pre>"},{"location":"shaderlib/colors/#saturation","title":"Saturation","text":"<pre><code>shader_type canvas_item;\n\nuniform float saturation : hint_range(0.0, 1.0, 0.1);\n\nvoid fragment() {\n    vec4 tex_color = texture(TEXTURE, UV);\n\n    COLOR.rgb = mix(vec3(dot(tex_color.rgb, vec3(0.299, 0.587, 0.114))), tex_color.rgb, saturation);\n    COLOR.a = tex_color.a;\n}\n</code></pre>"},{"location":"shaderlib/colors/#silhoutte","title":"Silhoutte","text":"<p>This is the shader I used to draw ghost effects for a character dash mechanic.</p> <pre><code>shader_type canvas_item;\n\nrender_mode blend_mix;\nuniform vec4 modulate: source_color;\n\nvoid fragment() {\n    COLOR = vec4(modulate.rgb, texture(TEXTURE, UV).a * modulate.a);\n}\n</code></pre>"},{"location":"shaderlib/dissolve/","title":"Dissolve and Fade Effects","text":"<p>The following are shaders that erase or reveal using masks, noise, or alpha</p>"},{"location":"shaderlib/dissolve/#dissolve","title":"Dissolve","text":"<p>This dissolve shader can be used for effects like a character or object burning away, fading out, or vanishing with noise-based erosion.</p> Parameter Description <code>dissolve_texture</code> Noise or gradient texture to control dissolve <code>dissolve_amount</code> From <code>0.0</code> (fully visible) to <code>1.0</code> (fully gone) <code>edge_color</code> Color of the dissolving edge (e.g., flame, glow) <code>edge_thickness</code> How thick the glowing edge is <pre><code>shader_type canvas_item;\n\nuniform sampler2D dissolve_texture; // grayscale noise/gradient\nuniform float dissolve_amount : hint_range(0.0, 1.0) = 0.0;\nuniform vec4 edge_color : source_color = vec4(1.0, 0.3, 0.0, 1.0); // fiery edge\nuniform float edge_thickness : hint_range(0.0, 0.2) = 0.05;\n\nvoid fragment() {\n    vec4 tex_color = texture(TEXTURE, UV);\n    float dissolve_value = texture(dissolve_texture, UV).r;\n\n    float edge_start = dissolve_amount - edge_thickness;\n    float edge_end = dissolve_amount;\n\n    if (dissolve_value &lt; edge_start) {\n        // Fully dissolved\n        discard;\n    } else if (dissolve_value &lt; edge_end) {\n        // Edge glow\n        COLOR = edge_color;\n    } else {\n        // Normal rendering\n        COLOR = tex_color;\n    }\n}\n</code></pre>"}]}